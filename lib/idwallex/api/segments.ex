# NOTE: This file is auto generated by OpenAPI Generator 7.8.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule Idwallex.Api.Segments do
  @moduledoc """
  API calls for all endpoints tagged `Segments`.
  """

  alias Idwallex.Connection
  import Idwallex.RequestBuilder

  @doc """
  List segments
  ## Headers - `Authorization` **[required]**: Token recebido na request **Autenticação > Obtendo um token de acesso**. - `Content-Type`: Deve ser sempre `application/json`.  ## Params  - `q`:  Parâmetro de busca por nome do fluxo.  - `limit`: Quantidade de itens por página. - `page`: Página atual.  ## Resposta - HTTP **200 OK** - Body de resposta em JSON.

  ### Parameters

  - `connection` (Idwallex.Connection): Connection to server
  - `prefix` (String.t): 
  - `opts` (keyword): Optional parameters
    - `:"Content-Type"` (String.t): 
    - `:Authorization` (String.t): Autenticação v2 ( Backoffice UUID Token )

  ### Returns

  - `{:ok, map()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec prefix_segment_get(Tesla.Env.client, String.t, keyword()) :: {:ok, map()} | {:error, Tesla.Env.t}
  def prefix_segment_get(connection, prefix, opts \\ []) do
    optional_params = %{
      :"Content-Type" => :headers,
      :Authorization => :headers
    }

    request =
      %{}
      |> method(:get)
      |> url("/#{prefix}/segment")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %{}}
    ])
  end

  @doc """
  Segment
  ## Headers - `Authorization` **[required]**: Token recebido na request **Autenticação > Obtendo um token de acesso**. - `Content-Type`: Deve ser sempre `application/json`.  ## Params  - `q`:  Parâmetro de busca por nome do fluxo.  - `limit`: Quantidade de itens por página. - `page`: Página atual.  ## Resposta - HTTP **200 OK** - Body de resposta em JSON.

  ### Parameters

  - `connection` (Idwallex.Connection): Connection to server
  - `prefix` (String.t): 
  - `id` (String.t): 
  - `opts` (keyword): Optional parameters
    - `:"Content-Type"` (String.t): 
    - `:Authorization` (String.t): Autenticação v2 ( Backoffice UUID Token )

  ### Returns

  - `{:ok, map()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec prefix_segment_id_get(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, map()} | {:error, Tesla.Env.t}
  def prefix_segment_id_get(connection, prefix, id, opts \\ []) do
    optional_params = %{
      :"Content-Type" => :headers,
      :Authorization => :headers
    }

    request =
      %{}
      |> method(:get)
      |> url("/#{prefix}/segment/#{id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %{}},
      {404, %{}}
    ])
  end

  @doc """
  Create segment
  ## Headers - `Authorization` **[obrigatório]**: Token recebido na request **Autenticação > Obtendo um token de acesso**. - `Content-Type`: Deve ser sempre `application/json`.  ## Body  - `name` **[obrigatório]** - `description` **[obrigatório]**    ## Resposta - HTTP **201 OK** - Body de resposta em JSON.

  ### Parameters

  - `connection` (Idwallex.Connection): Connection to server
  - `prefix` (String.t): 
  - `opts` (keyword): Optional parameters
    - `:"Content-Type"` (String.t): 
    - `:Authorization` (String.t): Autenticação v2 ( Backoffice UUID Token )
    - `:body` (String.t): 

  ### Returns

  - `{:ok, map()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec prefix_segment_post(Tesla.Env.client, String.t, keyword()) :: {:ok, map()} | {:error, Tesla.Env.t}
  def prefix_segment_post(connection, prefix, opts \\ []) do
    optional_params = %{
      :"Content-Type" => :headers,
      :Authorization => :headers,
      :body => :body
    }

    request =
      %{}
      |> method(:post)
      |> url("/#{prefix}/segment")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {201, %{}},
      {406, %{}}
    ])
  end
end
