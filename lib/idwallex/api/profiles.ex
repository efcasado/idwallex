# NOTE: This file is auto generated by OpenAPI Generator 7.8.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule Idwallex.Api.Profiles do
  @moduledoc """
  API calls for all endpoints tagged `Profiles`.
  """

  alias Idwallex.Connection
  import Idwallex.RequestBuilder

  @doc """
  Enriched information (ref)

  ### Parameters

  - `connection` (Idwallex.Connection): Connection to server
  - `prefix` (String.t): 
  - `ref` (String.t): 
  - `opts` (keyword): Optional parameters
    - `:"Content-Type"` (String.t): 
    - `:Authorization` (String.t): 

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec prefix_profile_enrichment_by_profile_ref_ref_get(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def prefix_profile_enrichment_by_profile_ref_ref_get(connection, prefix, ref, opts \\ []) do
    optional_params = %{
      :"Content-Type" => :headers,
      :Authorization => :headers
    }

    request =
      %{}
      |> method(:get)
      |> url("/#{prefix}/profile-enrichment/by-profile-ref/#{ref}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false}
    ])
  end

  @doc """
  Enriched information (id)

  ### Parameters

  - `connection` (Idwallex.Connection): Connection to server
  - `prefix` (String.t): 
  - `id` (String.t): 
  - `opts` (keyword): Optional parameters
    - `:"Content-Type"` (String.t): 
    - `:Authorization` (String.t): 

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec prefix_profile_enrichment_id_get(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def prefix_profile_enrichment_id_get(connection, prefix, id, opts \\ []) do
    optional_params = %{
      :"Content-Type" => :headers,
      :Authorization => :headers
    }

    request =
      %{}
      |> method(:get)
      |> url("/#{prefix}/profile-enrichment/#{id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false}
    ])
  end

  @doc """
  Create profile

  ### Parameters

  - `connection` (Idwallex.Connection): Connection to server
  - `prefix` (String.t): 
  - `opts` (keyword): Optional parameters
    - `:"Content-Type"` (String.t): 
    - `:Authorization` (String.t): 
    - `:body` (map()): 

  ### Returns

  - `{:ok, map()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec prefix_profile_post(Tesla.Env.client, String.t, keyword()) :: {:ok, map()} | {:error, Tesla.Env.t}
  def prefix_profile_post(connection, prefix, opts \\ []) do
    optional_params = %{
      :"Content-Type" => :headers,
      :Authorization => :headers,
      :body => :body
    }

    request =
      %{}
      |> method(:post)
      |> url("/#{prefix}/profile")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {406, %{}},
      {201, %{}}
    ])
  end

  @doc """
  Start flow

  ### Parameters

  - `connection` (Idwallex.Connection): Connection to server
  - `prefix` (String.t): 
  - `profile_ref` (String.t): 
  - `flow_id` (String.t): 
  - `opts` (keyword): Optional parameters
    - `:"Content-Type"` (String.t): 
    - `:Authorization` (String.t): 

  ### Returns

  - `{:ok, map()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec prefix_profile_profile_ref_flow_flow_id_post(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, map()} | {:error, Tesla.Env.t}
  def prefix_profile_profile_ref_flow_flow_id_post(connection, prefix, profile_ref, flow_id, opts \\ []) do
    optional_params = %{
      :"Content-Type" => :headers,
      :Authorization => :headers
    }

    request =
      %{}
      |> method(:post)
      |> url("/#{prefix}/profile/#{profile_ref}/flow/#{flow_id}")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {201, %{}}
    ])
  end

  @doc """
  Profile

  ### Parameters

  - `connection` (Idwallex.Connection): Connection to server
  - `prefix` (String.t): 
  - `ref` (String.t): 
  - `opts` (keyword): Optional parameters
    - `:"Content-Type"` (String.t): 
    - `:Authorization` (String.t): 

  ### Returns

  - `{:ok, map()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec prefix_profile_ref_get(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, map()} | {:error, Tesla.Env.t}
  def prefix_profile_ref_get(connection, prefix, ref, opts \\ []) do
    optional_params = %{
      :"Content-Type" => :headers,
      :Authorization => :headers
    }

    request =
      %{}
      |> method(:get)
      |> url("/#{prefix}/profile/#{ref}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %{}},
      {404, %{}}
    ])
  end

  @doc """
  Last profile flow

  ### Parameters

  - `connection` (Idwallex.Connection): Connection to server
  - `prefix` (String.t): 
  - `ref` (String.t): 
  - `opts` (keyword): Optional parameters
    - `:"Content-Type"` (String.t): 
    - `:Authorization` (String.t): 

  ### Returns

  - `{:ok, map()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec prefix_profile_ref_last_profile_flow_get(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, map()} | {:error, Tesla.Env.t}
  def prefix_profile_ref_last_profile_flow_get(connection, prefix, ref, opts \\ []) do
    optional_params = %{
      :"Content-Type" => :headers,
      :Authorization => :headers
    }

    request =
      %{}
      |> method(:get)
      |> url("/#{prefix}/profile/#{ref}/lastProfileFlow")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %{}},
      {404, %{}}
    ])
  end

  @doc """
  Profile flows

  ### Parameters

  - `connection` (Idwallex.Connection): Connection to server
  - `prefix` (String.t): 
  - `ref` (String.t): 
  - `opts` (keyword): Optional parameters
    - `:"Content-Type"` (String.t): 
    - `:Authorization` (String.t): 
    - `:limit` (integer()): 

  ### Returns

  - `{:ok, map()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec prefix_profile_ref_profile_flows_get(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, map()} | {:error, Tesla.Env.t}
  def prefix_profile_ref_profile_flows_get(connection, prefix, ref, opts \\ []) do
    optional_params = %{
      :"Content-Type" => :headers,
      :Authorization => :headers,
      :limit => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/#{prefix}/profile/#{ref}/profileFlows")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %{}},
      {404, %{}}
    ])
  end

  @doc """
  Update profile

  ### Parameters

  - `connection` (Idwallex.Connection): Connection to server
  - `prefix` (String.t): 
  - `ref` (String.t): 
  - `opts` (keyword): Optional parameters
    - `:"Content-Type"` (String.t): 
    - `:Authorization` (String.t): 
    - `:body` (map()): 

  ### Returns

  - `{:ok, map()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec prefix_profile_ref_put(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, map()} | {:error, Tesla.Env.t}
  def prefix_profile_ref_put(connection, prefix, ref, opts \\ []) do
    optional_params = %{
      :"Content-Type" => :headers,
      :Authorization => :headers,
      :body => :body
    }

    request =
      %{}
      |> method(:put)
      |> url("/#{prefix}/profile/#{ref}")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %{}},
      {406, %{}}
    ])
  end

  @doc """
  Update profile with SDK key

  ### Parameters

  - `connection` (Idwallex.Connection): Connection to server
  - `prefix` (String.t): 
  - `ref` (String.t): 
  - `opts` (keyword): Optional parameters
    - `:"Content-Type"` (String.t): 
    - `:Authorization` (String.t): 

  ### Returns

  - `{:ok, map()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec prefix_profile_ref_sdk_put(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, map()} | {:error, Tesla.Env.t}
  def prefix_profile_ref_sdk_put(connection, prefix, ref, opts \\ []) do
    optional_params = %{
      :"Content-Type" => :headers,
      :Authorization => :headers
    }

    request =
      %{}
      |> method(:put)
      |> url("/#{prefix}/profile/#{ref}/sdk")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {406, %{}},
      {200, %{}}
    ])
  end

  @doc """
  Create profile with SDK key

  ### Parameters

  - `connection` (Idwallex.Connection): Connection to server
  - `prefix` (String.t): 
  - `opts` (keyword): Optional parameters
    - `:"Content-Type"` (String.t): 
    - `:Authorization` (String.t): 
    - `:body` (String.t): 

  ### Returns

  - `{:ok, map()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec prefix_profile_sdk_post(Tesla.Env.client, String.t, keyword()) :: {:ok, map()} | {:error, Tesla.Env.t}
  def prefix_profile_sdk_post(connection, prefix, opts \\ []) do
    optional_params = %{
      :"Content-Type" => :headers,
      :Authorization => :headers,
      :body => :body
    }

    request =
      %{}
      |> method(:post)
      |> url("/#{prefix}/profile/sdk")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {406, %{}},
      {201, %{}}
    ])
  end

  @doc """
  List profiles
  ## Headers - `Authorization` **[required]**: Token recebido na request **Autenticação > Obtendo um token de acesso**. - `Content-Type`: Deve ser sempre `application/json`.  ## Params  - `q`: Parâmetro de busca por nome e cpf no perfil.  - `status`: Situação atual do perfil.      1 = ativo / 0 = inativo - `limit`: Quantidade de itens por página. - `page`: Página atual.  ## Resposta - HTTP **200 OK** - Body de resposta em JSON.

  ### Parameters

  - `connection` (Idwallex.Connection): Connection to server
  - `prefix` (String.t): 
  - `opts` (keyword): Optional parameters
    - `:"Content-Type"` (String.t): 
    - `:Authorization` (String.t): Autenticação v2 ( Backoffice UUID Token )

  ### Returns

  - `{:ok, String.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec prefix_profile_search_post(Tesla.Env.client, String.t, keyword()) :: {:ok, String.t} | {:error, Tesla.Env.t}
  def prefix_profile_search_post(connection, prefix, opts \\ []) do
    optional_params = %{
      :"Content-Type" => :headers,
      :Authorization => :headers
    }

    request =
      %{}
      |> method(:post)
      |> url("/#{prefix}/profile/search")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false}
    ])
  end
end
