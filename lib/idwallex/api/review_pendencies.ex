# NOTE: This file is auto generated by OpenAPI Generator 7.8.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule Idwallex.Api.ReviewPendencies do
  @moduledoc """
  API calls for all endpoints tagged `ReviewPendencies`.
  """

  alias Idwallex.Connection
  import Idwallex.RequestBuilder

  @doc """
  Keep CPF provided by OCR (Data Match)

  ### Parameters

  - `connection` (Idwallex.Connection): Connection to server
  - `prefix` (String.t): 
  - `data_match_id` (String.t): 
  - `opts` (keyword): Optional parameters
    - `:"Content-Type"` (String.t): 
    - `:Authorization` (String.t): 
    - `:body` (map()): 

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec prefix_review_data_match_data_match_id_accept_put(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def prefix_review_data_match_data_match_id_accept_put(connection, prefix, data_match_id, opts \\ []) do
    optional_params = %{
      :"Content-Type" => :headers,
      :Authorization => :headers,
      :body => :body
    }

    request =
      %{}
      |> method(:put)
      |> url("/#{prefix}/review/dataMatch/#{data_match_id}/accept")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false}
    ])
  end

  @doc """
  Inactivate profile (Data Match)

  ### Parameters

  - `connection` (Idwallex.Connection): Connection to server
  - `prefix` (String.t): 
  - `data_match_id` (String.t): 
  - `opts` (keyword): Optional parameters
    - `:"Content-Type"` (String.t): 
    - `:Authorization` (String.t): 
    - `:body` (map()): 

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec prefix_review_data_match_data_match_id_ignore_and_inactivate_profile_put(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def prefix_review_data_match_data_match_id_ignore_and_inactivate_profile_put(connection, prefix, data_match_id, opts \\ []) do
    optional_params = %{
      :"Content-Type" => :headers,
      :Authorization => :headers,
      :body => :body
    }

    request =
      %{}
      |> method(:put)
      |> url("/#{prefix}/review/dataMatch/#{data_match_id}/ignore-and-inactivate-profile")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false}
    ])
  end

  @doc """
  Keep CPF provided by user (Data Match)

  ### Parameters

  - `connection` (Idwallex.Connection): Connection to server
  - `prefix` (String.t): 
  - `data_match_id` (String.t): 
  - `opts` (keyword): Optional parameters
    - `:"Content-Type"` (String.t): 
    - `:Authorization` (String.t): 
    - `:body` (map()): 

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec prefix_review_data_match_data_match_id_ignore_put(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def prefix_review_data_match_data_match_id_ignore_put(connection, prefix, data_match_id, opts \\ []) do
    optional_params = %{
      :"Content-Type" => :headers,
      :Authorization => :headers,
      :body => :body
    }

    request =
      %{}
      |> method(:put)
      |> url("/#{prefix}/review/dataMatch/#{data_match_id}/ignore")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false}
    ])
  end

  @doc """
  Retry
  ## Headers - `Authorization` **[required]**: Token recebido na request **Autenticação > Obtendo um token de acesso**. - `Content-Type`: Deve ser sempre `application/json`.  ## Resposta - HTTP **200 OK** - Body de resposta em JSON.

  ### Parameters

  - `connection` (Idwallex.Connection): Connection to server
  - `prefix` (String.t): 
  - `ref` (String.t): 
  - `pendency_source_id` (String.t): ID da origem da pendência (profileFlowId ou profileExtractionId)
  - `action` (String.t): Pode ser enviado o valor RETRY
  - `opts` (keyword): Optional parameters
    - `:"Content-Type"` (String.t): 
    - `:Authorization` (String.t): Autenticação API Idwall
    - `:body` (String.t): 

  ### Returns

  - `{:ok, map()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec prefix_review_v1_ref_pendency_source_id_action_put(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, map()} | {:error, Tesla.Env.t}
  def prefix_review_v1_ref_pendency_source_id_action_put(connection, prefix, ref, pendency_source_id, action, opts \\ []) do
    optional_params = %{
      :"Content-Type" => :headers,
      :Authorization => :headers,
      :body => :body
    }

    request =
      %{}
      |> method(:put)
      |> url("/#{prefix}/review/v1/#{ref}/#{pendency_source_id}/#{action}")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %{}},
      {406, %{}}
    ])
  end
end
