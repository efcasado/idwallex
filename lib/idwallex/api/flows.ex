# NOTE: This file is auto generated by OpenAPI Generator 7.8.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule Idwallex.Api.Flows do
  @moduledoc """
  API calls for all endpoints tagged `Flows`.
  """

  alias Idwallex.Connection
  import Idwallex.RequestBuilder

  @doc """
  List flows
  ## Headers - `Authorization` **[required]**: Token recebido na request **Autenticação > Obtendo um token de acesso**. - `Content-Type`: Deve ser sempre `application/json`.  ## Params  - `q`:  Parâmetro de busca por nome do fluxo.  - `limit`: Quantidade de itens por página. - `page`: Página atual.  ## Resposta - HTTP **200 OK** - Body de resposta em JSON.

  ### Parameters

  - `connection` (Idwallex.Connection): Connection to server
  - `prefix` (String.t): 
  - `opts` (keyword): Optional parameters
    - `:"Content-Type"` (String.t): 
    - `:Authorization` (String.t): Autenticação v2 ( Backoffice UUID Token )

  ### Returns

  - `{:ok, map()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec prefix_flow_get(Tesla.Env.client, String.t, keyword()) :: {:ok, map()} | {:error, Tesla.Env.t}
  def prefix_flow_get(connection, prefix, opts \\ []) do
    optional_params = %{
      :"Content-Type" => :headers,
      :Authorization => :headers
    }

    request =
      %{}
      |> method(:get)
      |> url("/#{prefix}/flow")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %{}}
    ])
  end

  @doc """
  Flow
  ## Headers - `Authorization` **[required]**: Token recebido na request **Autenticação > Obtendo um token de acesso**. - `Content-Type`: Deve ser sempre `application/json`.  ## Resposta - HTTP **200 OK** - Body de resposta em JSON.

  ### Parameters

  - `connection` (Idwallex.Connection): Connection to server
  - `prefix` (String.t): 
  - `id` (String.t): 
  - `opts` (keyword): Optional parameters
    - `:"Content-Type"` (String.t): 
    - `:Authorization` (String.t): Autenticação v2 ( Backoffice UUID Token )

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec prefix_flow_id_get(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, map()} | {:error, Tesla.Env.t}
  def prefix_flow_id_get(connection, prefix, id, opts \\ []) do
    optional_params = %{
      :"Content-Type" => :headers,
      :Authorization => :headers
    }

    request =
      %{}
      |> method(:get)
      |> url("/#{prefix}/flow/#{id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {401, %{}},
      {404, %{}}
    ])
  end

  @doc """
  List flows with conditions
  ## Headers - `Authorization` **[required]**: Token recebido na request **Autenticação > Obtendo um token de acesso**. - `Content-Type`: Deve ser sempre `application/json`.  ## Params  - `q`:  Parâmetro de busca por nome do fluxo.  - `limit`: Quantidade de itens por página. - `page`: Página atual.  ## Resposta - HTTP **200 OK** - Body de resposta em JSON.

  ### Parameters

  - `connection` (Idwallex.Connection): Connection to server
  - `prefix` (String.t): 
  - `opts` (keyword): Optional parameters
    - `:"Content-Type"` (String.t): 
    - `:Authorization` (String.t): Autenticação v2 ( Backoffice UUID Token )
    - `:id` (String.t): 

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec prefix_flow_with_conditions_get(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def prefix_flow_with_conditions_get(connection, prefix, opts \\ []) do
    optional_params = %{
      :"Content-Type" => :headers,
      :Authorization => :headers,
      :id => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/#{prefix}/flow/with-conditions")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false}
    ])
  end
end
